@model TrashCollection.Models.EmployeePickupViewModel

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Employee</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.Label("First Name")
            @*@Html.DisplayNameFor(model => model.employee.FirstName)*@
        </dt>

        <dd>
            @Html.DisplayFor(model => model.employee.FirstName)
        </dd>

        <dt>
            @Html.Label("Last Name")
            @*@Html.DisplayNameFor(model => model.employee.LastName)*@
        </dt>

        <dd>
            @Html.DisplayFor(model => model.employee.LastName)
        </dd>

        @*<dt>
            @Html.DisplayNameFor(model => model.employee.EmailAddress)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.employee.EmailAddress)
        </dd>*@


    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.employee.EmployeeID }) 
    @*@Html.ActionLink("Index", "Home")*@
</p>

<table class="table">
    <tr>
        <th>
            @Html.Label("Active")
            @*@Html.DisplayNameFor(model => model.pickup.Status)*@
        </th>

        <th>
            @Html.Label("Pickup Date")
            @*@Html.DisplayNameFor(model => model.pickup.PickupDate.Date)*@
        </th>
        <th>
            @Html.Label("Address")
            @*@Html.DisplayNameFor(model => model.address.Street1)*@
        </th>
        <th>
            @Html.Label("City")
            @*@Html.DisplayNameFor(model => model.address.City)*@
        </th>
        <th>
            @Html.Label("State")
            @*@Html.DisplayNameFor(model => model.address.City.State )*@
        </th>
        <th>
            @Html.Label("ZipCode")
            @*@Html.DisplayNameFor(model => model.address.Zipcode)*@
        </th>




        <th></th>
    </tr>

    @foreach (var pickupItem in Model.employeePickups)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Status)
            </td>

            <td>
                @Html.DisplayFor(modelItem => pickupItem.PickupDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.Street1)
            </td>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.City.CityName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.City.State.StateName)
            </td>

            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.Zipcode.ZipcodeName)
            </td>


            @*<td>
                @Html.ActionLink("Edit", "Edit", new { id = pickupItem.EmployeeID }) |
                @Html.ActionLink("Details", "Details", new { id = pickupItem.EmployeeID }) |
                @Html.ActionLink("Delete", "Delete", new { id = pickupItem.EmployeeID })
            </td>*@
        </tr>

    }

</table>


<html>

<body>

    <p>Click the button to see the pickups on a map.</p>
    <p></p>
    <button onclick="codeAddress()">Click</button>
    @*<button onclick="model.employeePickupAddresses.forEach(codeAddress)">Click</button>*@
    <p></p>

    <div id="map" style="width:100%;height:500px"></div>
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJqGZjsGpZlyNJgDWOakfB4euZosFNokk"></script>
    <script type="text/javascript">
    var map;
    function myMap(){
        //var myCenter = new google.maps.LatLng(43,-88);
        map = new google.maps.Map(document.getElementById("map"), {
        zoom: 10,
        center: new google.maps.LatLng(43,-88),
        mapTypeId: google.maps.MapTypeId.SATELLITE
        });
        map.setTilt(45);
    }

    google.maps.event.addDomListener(window, 'load', myMap);


    function codeAddress() {
        var infowindow = new google.maps.InfoWindow();
        var geocoder = new google.maps.Geocoder();
        var marker;
        
        var pickups = @Html.Raw(Json.Encode(Model.employeePickupAddresses));

        for (var i = 0; i < pickups.length; i++) {
            var x = new Object();
            x.address = pickups[i];
            geocoder.geocode(x, function (results, status) {
                if (status == 'OK') {
                    var position = new Object();
                    marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });      
                    bounds.extend(marker.position);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
    }
    

    
    </script>

</body>
</html>



