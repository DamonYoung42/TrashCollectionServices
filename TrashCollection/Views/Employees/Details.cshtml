@model TrashCollection.Models.EmployeePickupViewModel

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Employee</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.Label("First Name")
            @*@Html.DisplayNameFor(model => model.employee.FirstName)*@
        </dt>

        <dd>
            @Html.DisplayFor(model => model.employee.FirstName)
        </dd>

        <dt>
            @Html.Label("Last Name")
            @*@Html.DisplayNameFor(model => model.employee.LastName)*@
        </dt>

        <dd>
            @Html.DisplayFor(model => model.employee.LastName)
        </dd>

        @*<dt>
            @Html.DisplayNameFor(model => model.employee.EmailAddress)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.employee.EmailAddress)
        </dd>*@


    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.employee.EmployeeID }) 
    @*@Html.ActionLink("Index", "Home")*@
</p>

<table class="table">
    <tr>
        <th>
            @Html.Label("Active")
            @*@Html.DisplayNameFor(model => model.pickup.Status)*@
        </th>

        <th>
            @Html.Label("Pickup Date")
            @*@Html.DisplayNameFor(model => model.pickup.PickupDate.Date)*@
        </th>
        <th>
            @Html.Label("Address")
            @*@Html.DisplayNameFor(model => model.address.Street1)*@
        </th>
        <th>
            @Html.Label("City")
            @*@Html.DisplayNameFor(model => model.address.City)*@
        </th>
        <th>
            @Html.Label("State")
            @*@Html.DisplayNameFor(model => model.address.City.State )*@
        </th>
        <th>
            @Html.Label("ZipCode")
            @*@Html.DisplayNameFor(model => model.address.Zipcode)*@
        </th>




        <th></th>
    </tr>

    @foreach (var pickupItem in Model.employeePickups)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Status)
            </td>

            <td>
                @Html.DisplayFor(modelItem => pickupItem.PickupDate.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.Street1)
            </td>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.City.CityName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.City.State.StateName)
            </td>

            <td>
                @Html.DisplayFor(modelItem => pickupItem.Address.Zipcode.ZipcodeName)
            </td>


            @*<td>
                @Html.ActionLink("Edit", "Edit", new { id = pickupItem.EmployeeID }) |
                @Html.ActionLink("Details", "Details", new { id = pickupItem.EmployeeID }) |
                @Html.ActionLink("Delete", "Delete", new { id = pickupItem.EmployeeID })
            </td>*@
        </tr>

    }

</table>


<html>

<body>

    <div id="map" style="width:100%;height:500px"></div>

    @*<script>
    function myMap() {
      var myCenter = new google.maps.LatLng(43,-88);
      var mapCanvas = document.getElementById("map");
      var mapOptions = {center: myCenter, zoom: 13};
      var map = new google.maps.Map(mapCanvas, mapOptions);
      var marker = new google.maps.Marker({position:myCenter});
      marker.setMap(map);
    }
        </script>

    *@
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJqGZjsGpZlyNJgDWOakfB4euZosFNokk&callback=myMap"></script>

    <script type="text/javascript">

    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 10,
      center: new google.maps.LatLng(43,-88),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    var infowindow = new google.maps.InfoWindow();

    var marker, i;


        function codeAddress() {
            foreach(address in employeePickupAddresses)
            {
                var address = document.getElementById('address').value;
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == 'OK') {
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }
        }</script>

</body>
</html>


  @*var geocoder;
  var map;
  function initialize() {
    geocoder = new google.maps.Geocoder();
    var latlng = new google.maps.LatLng(43,-89);
    var mapOptions = {
      zoom: 8,
      center: latlng
    }
    map = new google.maps.Map(document.getElementById('map'), mapOptions);
  }

  function codeAddress() {
    var address = document.getElementById('address').value;
    geocoder.geocode( { 'address': address}, function(results, status) {
      if (status == 'OK') {
        map.setCenter(results[0].geometry.location);
        var marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
        });
      } else {
        alert('Geocode was not successful for the following reason: ' + status);
      }
    });
  }*@


@*function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 10,
    center: {lat: 43, lng: -88}
  });
  var geocoder = new google.maps.Geocoder();

  document.getElementById('submit').addEventListener('click', function() {
    geocodeAddress(geocoder, map);
  });
}

function geocodeAddress(geocoder, resultsMap) {
  var address = document.getElementById('address').value;
  geocoder.geocode({'address': address}, function(results, status) {
    if (status === 'OK') {
      resultsMap.setCenter(results[0].geometry.location);
      var marker = new google.maps.Marker({
        map: resultsMap,
        position: results[0].geometry.location
      });
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
}*@



